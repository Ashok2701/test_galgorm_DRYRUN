import React, { Component } from "react";
import "flatpickr/dist/themes/material_green.css";
import MultiSelect from './MultiSelect';
import MultiRouteCode from './MultiRouteCode';
import MultiVehicleCode from './MultiVehicleCode';
import { withNamespaces } from "react-i18next";
import Select from './Select';
import SelectionAutoGenerateList from './SelectionAutoGenerateList';
import Flatpickr from "react-flatpickr";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/dist/styles/ag-grid.css";
import "ag-grid-community/dist/styles/ag-theme-balham.css";
import SyncRoundedIcon from '@material-ui/icons/SyncRounded';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import RouteScheduler from './RouteScheduler';
import { getsampleexample } from '../../../service';
import { callWebservice } from '../../../service';
import moment from 'moment';
import "../dashboard.scss";
import {
    Container,
    Row,
    FormGroup,
    Form, Label, Input, Media
} from "reactstrap";
//import Info from './Info';


class SideNav_Test extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            addvalidateconfirmShow: false,
            addConfirmShow: false,
            ShowSelectionList: false,
            confirmMessage: '',
            documents: this.props.defaultprocessDocs,
            sameVehicles: this.props.samevehicleChecked
        }

        this.onTagsChange = this.onTagsChange.bind(this);
    }

    setSelectedSites = (val) => {
        console.log("Thhh setSelectedSites", val);
        this.props.handleSiteChange(val);

    }


    setSelectedRouteCodes = (val) => {

        this.props.handleRouteCodeChange(val);
    }


    setSelectedVehicleCodes = (val) => {

        this.props.handleVehicleCodeChange(val);
    }

    selectedSitesArr = (val) => {
        console.log("Thhh selectedSitesArr", val);
        this.props.sitesArr(val);
    }

    selectedRouteCodeArr = (val) => {
        this.props.RouteCodeArr(val);
    }

    selectedVehicleCodeArr = (val) => {
        this.props.VehicleCodeArr(val);
    }

    onTagsChange = (event, value) => {
        //this.props.handleSiteChange(value);
    }
    getRouteScheduler = (routesSchedule) => {
        this.props.getValuestoApp(routesSchedule)
    }


    onDateselection = (date) => {
        console.log("T11 inside dateselection", date);
        const Seldate = moment(date[0]).format('YYYY-MM-DD');
        console.log("T11 inside dateselection", Seldate);
        this.props.handleDateChange(Seldate);
    }



    depalnify = () => {
        this.props.submitDocumentsforTripCreation();
    }


    OnSelectionforAutoGenerateRoute = () => {
        this.setState({
            ShowSelectionList: true,
            //Datalist: this.props.geoData
        });
    }


    autoGeneratedRouteClick = () => {
        this.props.autoGenerateTrips();
    }


    OnSameVehcheckBoxChange = () => {
        console.log("T222 docpanel - to plan change");
        this.setState({ sameVehicles: !this.state.sameVehicles });
        this.props.OncheckedSameVehicles(!this.state.sameVehicles)
    }



    autoResetRoutes = () => {
        this.props.autoResetTrips();
    }


    OnGroupLockingTrips = () => {
        this.props.grouplockTrips();

    }


    OnGroupOptimiseTrips = () => {
        console.log("TOOO inside optmise trip")
        this.props.groupOptmiseTrips();

    }


    OnGroupValidateTrips = () => {

        this.props.onValidateAll();
        /*
                  this.setState({
                      confirmMessage: this.props.t('AllValidate'),
                      addvalidateconfirmShow: true,
                  });
        */

    }
    onGroupValidateNo = () => {
        this.setState({
            addvalidateconfirmShow: false
        })
    }

    onGroupValidateYes = () => {

        this.props.onValidateAll();
        console.log("GV - Yes confirm for group Valdiation");
        this.setState({
            addvalidateconfirmShow: false
        })
    }

    handleDocProcessChange = (event) => {
        console.log("Changed Value =", event.target.value);
        this.props.onDocProcessChange(event.target.value);
        this.setState({
            documents: event.target.value
        })
    }



    render() {
        console.log("props of RouteCode", this.props.routecodes);
        let Selection_win_Close = () => this.setState({ ShowSelectionList: false });

        let optionItems = [];
        var optionSelected = {};
        var selectedSite = {};
        let optionRouteCodeItems = [];

        var optionSelectedRouteCode = {};
        var selectedRouteCode = {};

        let optionVehicleCodeItems = [];
        var optionSelectedVehicleCode = {};
        var selectedVehicleCode = {};

        var placeHolder = "All";
        this.props.sites && this.props.sites.length > 0 && this.props.sites.map((site) => {
            if (site.id == this.props.selectedSite) {
                selectedSite = site;
                placeHolder = site.value;
                optionSelected.value = site.id;
                optionSelected.label = (site.value + "(" + site.id + ")");
            }
            optionItems.push({ value: site.id, label: (site.value + "(" + site.id + ")") })
        });
        this.props.routecodes && this.props.routecodes.length > 0 && this.props.routecodes.map((routecode) => {
            if (routecode.routeNo == this.props.selectedRouteCode) {
                selectedRouteCode = routecode;
                placeHolder = routecode.routeDesc;
                optionSelected.value = routecode.routeNo;
                optionSelected.label = (routecode.routeDesc);
            }
            optionRouteCodeItems.push({ value: routecode.routeNo, label: (routecode.routeDesc) })
        });
        this.props.vehicles && this.props.vehicles.length > 0 && this.props.vehicles.map((vehicle) => {
            if (vehicle.codeyve == this.props.selectedRouteCode) {
                selectedVehicleCode = vehicle;
                placeHolder = vehicle.routeDesc;
                optionSelected.value = vehicle.codeyve;
                optionSelected.label = (vehicle.routeDesc);
            }
            optionVehicleCodeItems.push({ value: vehicle.codeyve, label: (vehicle.codeyve) })
        });

        return (
            <>
                <Form className="row_nav" >
                    <div style={{ display: this.props.vehicleShow }}>
                        <FormGroup className="selectNav-container mb-0 col-md-3 col-lg-3 col-xl-2">
                            <MultiSelect
                                setSelectedSites={this.setSelectedSites}
                                selectedSitesArr={this.selectedSitesArr}
                                defaultSelected={this.props.selectedSitesArr}
                                options={optionItems} />

                        </FormGroup>

                        <FormGroup className="select-Navcontainer mb-0 col-md-2 col-lg-2 col-xl-2">
                            <MultiRouteCode
                                setSelectedRouteCodes={this.setSelectedRouteCodes}
                                selectedRouteCodeArr={this.selectedRouteCodeArr}
                                options={optionRouteCodeItems} />
                        </FormGroup>
                    </div>
                    <div style={{ display: this.props.vehicleShow }}>
                        <FormGroup className="select-Navcontainer mb-0 col-md-2 col-lg-2 col-xl-2">
                            <MultiVehicleCode
                                setSelectedVehicleCodes={this.setSelectedVehicleCodes}
                                selectedVehicleCodeArr={this.selectedVehicleCodeArr}
                                options={optionVehicleCodeItems} />
                        </FormGroup>
                    </div>

                    &emsp;
                    <div className="SideNav_Btns"
                        style={{
                            display: this.props.schedulerShow,
                            alignSelf: "center",
                            justifyContent: "space-between",

                        }}
                    >

                        <button size="sm" type="button" class="btn btn-success" onClick={() => this.props.refreshAllPanels()}>{this.props.t('REFRESH')}</button>

                        <button type="button" class="btn btn-info" onClick={this.depalnify}>{this.props.t('GENERATE ROUTE')}</button>
                        <button type="button" class="btn btn-dark" onClick={() => this.OnGroupOptimiseTrips()}> OPTIMISE</button>
                        {this.props.documentPanel_dateflg &&
                            <>
                                <button type="button" class="btn btn-success" onClick={() => this.OnGroupLockingTrips()}>{this.props.t('GROUP LOCK')}</button>
                                <button type="button" class="btn btn-primary" onClick={() => this.OnGroupValidateTrips()}>{this.props.t('GROUP VALIDATE')}</button>


                                <button type="button" class="btn btn-info " onClick={() => this.autoGeneratedRouteClick()}>{this.props.t('AUTO - GENERATE ROUTE')}</button>
                                <button type="button" class="btn btn-dark " onClick={() => this.autoResetRoutes()}>{this.props.t('RTZ')}</button>

                                <>  <span style={{ fontSize: '16px', fontWeight: 'bold' }}>Max Stops : </span>  <input style={{ width: 50, height: '40px', fontSize: "16px", fontWeight: 'bolder' }} type="text" onChange={this.handleDocProcessChange} value={this.props.defaultprocessDocs} /> </>
                                <Input style={{ width: 100, height: '30px' }}
                                    type="checkbox"
                                    onChange={() => this.OnSameVehcheckBoxChange()}
                                    checked={this.state.sameVehicles}

                                />&emsp;  &emsp; &emsp;
                                <span style={{ fontSize: '16px', fontWeight: 'bold' }}>Incremental Routes </span>
                            </>
                        }

                    </div>
                    <div style={{ display: this.props.vrShow, width: "60%", alignSelf: "center" }}>

                        <button type="button"
                            class="btn btn-primary"
                            style={{ display: this.props.vrShow, marginLeft: "1000px" }}
                            onClick={() => this.props.onVRhide()}>
                            <span>{this.props.t('Back')}</span>
                        </button>
                    </div>
                </Form>
                <SelectionAutoGenerateList
                    show={this.state.ShowSelectionList}
                    onHide={Selection_win_Close}
                    Vehiclelist={this.props.vehiclePanel}
                //  vehiclePanel={this.props.vehiclePanel}
                ></SelectionAutoGenerateList>
            </>
        );
    }
}

export default withNamespaces()(SideNav_Test);