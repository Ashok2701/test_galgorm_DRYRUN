import React, { Component } from "react";
import "flatpickr/dist/themes/material_green.css";
import MultiSelect from './MultiSelect';
import MultiRouteCode from './MultiRouteCode';
import { withNamespaces } from "react-i18next";
import Select from './Select';
import SelectionAutoGenerateList from './SelectionAutoGenerateList';
import Flatpickr from "react-flatpickr";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/dist/styles/ag-grid.css";
import "ag-grid-community/dist/styles/ag-theme-balham.css";
import SyncRoundedIcon from '@material-ui/icons/SyncRounded';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import RouteScheduler from './RouteScheduler';
import { getsampleexample } from '../../../service';
import { callWebservice } from '../../../service';
import moment from 'moment';
import {
  Container,
  Row,
  FormGroup,
  Form, Label, Input, Media
} from "reactstrap";
//import Info from './Info';


class SideNav extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
         addvalidateconfirmShow: false,
         addConfirmShow: false,
         ShowSelectionList : false,
         confirmMessage: '',
         documents : this.props.defaultprocessDocs,
         sameVehicles : this.props.samevehicleChecked
        }

        this.onTagsChange = this.onTagsChange.bind(this);
    }

   setSelectedSites = (val) => {
          this.props.handleSiteChange(val);
      }

    setSelectedRouteCodes = (val) => {
             this.props.handleRouteCodeChange(val);
         }

      selectedSitesArr = (val) => {
          this.props.sitesArr(val);
      }

        selectedRouteCodeArr = (val) => {
                this.props.RouteCodeArr(val);
            }

    onTagsChange = (event, value) => {
        //this.props.handleSiteChange(value);
    }
    getRouteScheduler = (routesSchedule) => {
        this.props.getValuestoApp(routesSchedule)
    }


    onDateselection = (date) => {
     console.log("T11 inside dateselection",date);
     const Seldate = moment(date[0]).format('YYYY-MM-DD');
     console.log("T11 inside dateselection",Seldate);
         this.props.handleDateChange(Seldate);
    }



depalnify = ()=>{
     this.props.submitDocumentsforTripCreation();
 }


 OnSelectionforAutoGenerateRoute = () => {
 this.setState({
            ShowSelectionList: true,
            //Datalist: this.props.geoData
        });
 }


 autoGeneratedRouteClick = ()=>{
      this.props.autoGenerateTrips();
  }


   OnSameVehcheckBoxChange = () => {
             console.log("T222 docpanel - to plan change");
                        this.setState({ sameVehicles: !this.state.sameVehicles });
                        this.props.OncheckedSameVehicles(!this.state.sameVehicles)
                    }



  autoResetRoutes = () => {
      this.props.autoResetTrips();
  }


 OnGroupLockingTrips = () => {
    this.props.grouplockTrips();

 }




 OnGroupValidateTrips = () => {

 this.props.onValidateAll();
/*
          this.setState({
              confirmMessage: this.props.t('AllValidate'),
              addvalidateconfirmShow: true,
          });
*/

      }
 onGroupValidateNo = () => {
         this.setState({
             addvalidateconfirmShow: false
         })
     }

 onGroupValidateYes = () => {

       this.props.onValidateAll();
       console.log("GV - Yes confirm for group Valdiation");
         this.setState({
             addvalidateconfirmShow: false
         })
     }

  handleDocProcessChange = (event) => {
    console.log("Changed Value =",event.target.value);
    this.props.onDocProcessChange(event.target.value);
    this.setState({
      documents : event.target.value
    })
  }



    render() {
       console.log("props of RouteCode", this.props.routecodes);
       let Selection_win_Close = () => this.setState({ ShowSelectionList: false });

        let optionItems = [];
        var optionSelected = {};
        var selectedSite = {};
         let optionRouteCodeItems = [];
                var optionSelectedRouteCode = {};
                var selectedRouteCode = {};
        var placeHolder = "All";
        this.props.sites && this.props.sites.length > 0 && this.props.sites.map((site) => {
            if (site.id == this.props.selectedSite) {
                selectedSite = site;
                placeHolder = site.value;
                optionSelected.value = site.id;
                optionSelected.label = (site.value + "(" + site.id + ")");
            }
            optionItems.push({ value: site.id, label: (site.value + "(" + site.id + ")") })
        });
         this.props.routecodes && this.props.routecodes.length > 0 && this.props.routecodes.map((routecode) => {
                            if (routecode.routeNo == this.props.selectedRouteCode) {
                                selectedRouteCode = routecode;
                                placeHolder = routecode.routeDesc;
                                optionSelected.value = routecode.routeNo;
                                optionSelected.label = (routecode.routeDesc);
                            }
                            optionRouteCodeItems.push({ value: routecode.routeNo, label: (routecode.routeDesc) })
                        });

        return (
             <>
                 <Media>
                                                                                 <Media body className="overflow-hidden">
                <Form className="row" style={{height:"80px"}} >
                              <FormGroup className="select2-container mb-0 col-md-3 col-lg-3 col-xl-2">
                              <MultiSelect
                                 setSelectedSites={this.setSelectedSites}
                                 selectedSitesArr={this.selectedSitesArr}
                                 options={optionItems} />

                              </FormGroup>
                              <div style={{display : this.props.vehicleShow}}>
  <FormGroup className="select2-container mb-0 col-md-2 col-lg-2 col-xl-2">
                                                            <MultiRouteCode
                                                               setSelectedRouteCodes={this.setSelectedRouteCodes}
                                                               selectedRouteCodeArr={this.selectedRouteCodeArr}
                                                               options={optionRouteCodeItems} />
                                                            </FormGroup>
                                                            </div>

                              &emsp;
<div
                                            style={{
                                              display : this.props.schedulerShow,
                                              alignSelf:"center",
                                              paddingLeft: "100px",
                                              float: "right",
                                              paddingRight : "100px",
                                            }}
                                          >
                                           <button size="sm" type="button" class="btn btn-success  ml-3" onClick = {() => this.props.refreshAllPanels()}>{this.props.t('REFRESH')}</button>

                                           <button type="button" class="btn btn-info  ml-3" onClick={this.depalnify}>{this.props.t('GENERATE ROUTE')}</button>
                                           <button type="button" class="btn btn-dark ml-3 ">{this.props.t('OPTIMISE')}</button>
  &emsp;  &emsp;

{ this.props.documentPanel_dateflg &&
                                           <>
                                           <button type="button" class="btn btn-success  ml-3"  onClick={() => this.OnGroupLockingTrips}>{this.props.t('GROUP LOCK')}</button>
                                           <button type="button" class="btn btn-primary ml-3 " onClick={() => this.OnGroupValidateTrips}>{this.props.t('GROUP VALIDATE')}</button>


                                          <button type="button" class="btn btn-info  ml-3" onClick={() => this.autoGeneratedRouteClick}>{this.props.t('AUTO - GENERATE ROUTE')}</button>
                                           <button type="button" class="btn btn-dark ml-3 " onClick={() => this.autoResetRoutes}>{this.props.t('RTZ')}</button>
                                            &emsp;  &emsp; &emsp;  &emsp;
                                           <>  <span style={{fontSize : '16px', fontWeight: 'bold'}}>Max Stops : </span>  <input style={{width: 100,height: '40px',fontSize :"16px", fontWeight: 'bolder' }} type="text" onChange={this.handleDocProcessChange} value={this.state.documents} /> </>
                                             &emsp;  &emsp; &emsp;  &emsp;
                                             <Input style={{width: 100,height: '30px'}}
                                                                type="checkbox"
                                                                 onChange = {()=>this.OnSameVehcheckBoxChange()}
                                                                 checked={this.state.sameVehicles}

                                                              />&emsp;  &emsp; &emsp;
                                              <span style={{fontSize : '16px', fontWeight: 'bold'}}>Incremental Routes </span>
                                               </>
                                           }

                                        </div>
                          <div style={{ display: this.props.vrShow, width:"60%" , alignSelf:"center"}}>

                                                                                    <button type="button"
                                                                                       class="btn btn-primary"
                                                                                        style={{ display: this.props.vrShow , marginLeft : "1000px"}}
                                                                                        onClick={() => this.props.onVRhide()}>
                                                                                        <span>{this.props.t('Back')}</span>
                                                                                    </button>
 </div>
  </Form>
  </Media>
                                             </Media>

                    <SelectionAutoGenerateList
                                      show={this.state.ShowSelectionList}
                                      onHide={Selection_win_Close}
                                     Vehiclelist={this.props.vehiclePanel}
                                    //  vehiclePanel={this.props.vehiclePanel}
                                  ></SelectionAutoGenerateList>
            </>
        );
    }
}

export default  withNamespaces()(SideNav);